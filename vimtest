set guioptions=a
set clipboard=autoselect
set clipboard=unnamedplus
set expandtab " タブ入力を複数の空白入力に置き換える
set tabstop=4 " 画面上でタブ文字が占める幅
set softtabstop=4 " 連続した空白に対してタブキーやバックスペースキーでカーソルが動く幅
set autoindent " 改行時に前の行のインデントを継続する
set smartindent " 改行時に前の行の構文をチェックし次の行のインデントを増減する
set shiftwidth=4 " smartindentで増減する幅
set incsearch " インクリメンタルサーチ. １文字入力毎に検索を行う
set ignorecase " 検索パターンに大文字小文字を区別しない
set smartcase " 検索パターンに大文字を含んでいたら大文字小文字を区別する
set hlsearch " 検索結果をハイライト
set whichwrap=b,s,h,l,<,>,[,],~ " カーソルの左右移動で行末から次の行の行頭への移動が可能になる
set number " 行番号を表示
set cursorline " カーソルラインをハイライト
nnoremap j gj
nnoremap k gk
nnoremap <down> gj
nnoremap <up> gk
autocmd BufNewFile,BufRead *.py let &l:errorformat = '%A  File "%f"\, line %l%.%#,%Z%[%^ ]%\=%m'
inoremap <F5> <ESC>

set backspace=indent,eol,start
set showmatch " 括弧の対応関係を一瞬表示する
"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved???
endif

" Required:
set runtimepath+=~/.vim/dein.vim
" Required:
"if dein#load_state('~/.vim/dein')
    call dein#begin('~/.vim/dein')
    " Required:
    call dein#add('~/.vim/dein.vim')

    call dein#add('Shougo/vimproc',{
                \ 'build' : {
                \     'unix' : 'make -f make_unix.mak'
                \    }
                \ })

call dein#add('Shougo/neocomplete.vim')
    let g:neocomplete#enable_at_startup = 1
    " smartcase有効化. 大文字が入力されるまで大文字小文字の区別を無視する
    let g:neocomplete#enable_smart_case = 1
    " 3文字以上の単語に対して補完を有効にする
    let g:neocomplete#min_keyword_length = 3
    " 区切り文字まで補完する
    let g:neocomplete#enable_auto_delimiter = 1
    " 1文字目の入力から補完のポップアップを表示
    let g:neocomplete#auto_completion_start_length = 1
    " バックスペースで補完のポップアップを閉じる
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    " 補完候補が表示されている場合は確定。そうでない場合は改行
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    endfunction
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

    call dein#add('Shougo/neosnippet.vim')

    call dein#add('Shougo/neosnippet-snippets')

    call dein#add('thinca/vim-quickrun')
    let g:quickrun_no_default_key_mappings = 1
    nnoremap <F5> :cclose<CR>:write<CR>:QuickRun -mode n<CR>
    xnoremap <F5>:<C-U>cclose<CR>:write<CR>gv:QuickRun -mode v<CR>
    let g:quickrun_config={'*': {'split': 'vertical 30sp'}}
    let g:quickrun_config = get(g:, 'quickrun_config', {})
    let g:quickrun_config._ = {
          \ 'python'    : { 'command' : 'python3' },
          \ 'runner/vimproc'    : 'quickrun-module-runner/vimproc',
          \ 'runner/concurrent_process/load/' : 'load %s',
          \ 'hook/sweep' : 'quickrun-module-hook/sweep',
          \ 'outputter/quickfix/into' : 1,
          \ 'runner/vimproc/updatetime' : 10,
          \ 'outputter' : 'error',
          \ 'outputter/error/success' : 'buffer',
          \ 'outputter/error/error'   : 'quickfix',
          \ 'outputter/buffer/close_on_empty' : 1,
          \ }

    call dein#add('itchyny/lightline.vim')
    set laststatus=2 "anytime displaying stetas_line

    call dein#add('nathanaelkane/vim-indent-guides')
    let g:indent_guides_auto_colors = 0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=darkgray   ctermbg=101
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=lightgray ctermbg=102
    let g:indent_guides_guide_size = 1
    let g:indent_guides_start_level = 2

    call dein#add('ctrlpvim/ctrlp.vim')
    " CtrlPの設定
    let g:ctrlp_match_window = 'order:ttb,min:20,max:20,results:100' " マッチウインドウの設定. 「下部に表示, 大きさ20行で固定, 検索結果100件」
    let g:ctrlp_show_hidden = 1 " .(ドット)から始まるファイルも検索対象にする
    let g:ctrlp_types = ['fil'] "ファイル検索のみ使用
    let g:ctrlp_extensions = ['funky', 'commandline'] " CtrlPの拡張として「funky」と「commandline」を使用
    " CtrlPCommandLineの有効化
    "command! CtrlPCommandLine call ctrlp#init(ctrlp#commandline#id())
    " CtrlPFunkyの有効化
    let g:ctrlp_funky_matchtype = 'path'

    call dein#add('romainl/Apprentice')
    " You can specify revision/branch/tag.
    "  call dein#add('Shougo/vimshell', { 'rev': '3787e5' })
    " Required:
    call dein#end()
    call dein#save_state()
"endif

" Required:
"filetype plugin indent on
"syntax enable

" If you want to install not installed plugins on startup.
if dein#check_install()
    call dein#install()
endif

"End dein Scripts-------------------------
set t_Co=256
syntax on
colorscheme apprentice
